import java.io.*;
import java.util.*;

class Patient implements Serializable {
    int id;
    String name;
    String disease;
    int age;
    String gender;

    Patient(int id, String name, String disease, int age, String gender) {
        this.id = id;
        this.name = name;
        this.disease = disease;
        this.age = age;
        this.gender = gender;
    }

    public String toString() {
        return "Patient ID: " + id + " | Name: " + name + " | Disease: " + disease +
               " | Age: " + age + " | Gender: " + gender;
    }
}

class Doctor implements Serializable {
    int id;
    String name;
    String specialization;

    Doctor(int id, String name, String specialization) {
        this.id = id;
        this.name = name;
        this.specialization = specialization;
    }

    public String toString() {
        return "Doctor ID: " + id + " | Name: " + name + " | Specialization: " + specialization;
    }
}

class Appointment implements Serializable {
    int patientId;
    int doctorId;
    String date;

    Appointment(int patientId, int doctorId, String date) {
        this.patientId = patientId;
        this.doctorId = doctorId;
        this.date = date;
    }

    public String toString() {
        return "Appointment: Patient ID " + patientId + " with Doctor ID " + doctorId +
               " on " + date;
    }
}

public class HospitalManagement {
    static Scanner sc = new Scanner(System.in);
    static ArrayList<Patient> patients = new ArrayList<>();
    static ArrayList<Doctor> doctors = new ArrayList<>();
    static ArrayList<Appointment> appointments = new ArrayList<>();

    public static void main(String[] args) {
        loadData();
        while (true) {
            System.out.println("\n=== Hospital Management System ===");
            System.out.println("1. Add Patient");
            System.out.println("2. View Patients");
            System.out.println("3. Add Doctor");
            System.out.println("4. View Doctors");
            System.out.println("5. Book Appointment");
            System.out.println("6. View Appointments");
            System.out.println("7. Exit");
            System.out.print("Enter your choice: ");
            int choice = sc.nextInt();

            switch (choice) {
                case 1 -> addPatient();
                case 2 -> viewPatients();
                case 3 -> addDoctor();
                case 4 -> viewDoctors();
                case 5 -> bookAppointment();
                case 6 -> viewAppointments();
                case 7 -> {
                    saveData();
                    System.out.println("Data saved. Exiting...");
                    System.exit(0);
                }
                default -> System.out.println("Invalid choice! Try again.");
            }
        }
    }

    // === PATIENT MANAGEMENT ===
    static void addPatient() {
        System.out.print("Enter Patient ID: ");
        int id = sc.nextInt();
        sc.nextLine();
        System.out.print("Enter Name: ");
        String name = sc.nextLine();
        System.out.print("Enter Disease: ");
        String disease = sc.nextLine();
        System.out.print("Enter Age: ");
        int age = sc.nextInt();
        sc.nextLine();
        System.out.print("Enter Gender: ");
        String gender = sc.nextLine();
        patients.add(new Patient(id, name, disease, age, gender));
        System.out.println("✅ Patient added successfully!");
    }

    static void viewPatients() {
        if (patients.isEmpty()) {
            System.out.println("No patients found!");
            return;
        }
        System.out.println("\n--- Patient List ---");
        for (Patient p : patients) System.out.println(p);
    }

    // === DOCTOR MANAGEMENT ===
    static void addDoctor() {
        System.out.print("Enter Doctor ID: ");
        int id = sc.nextInt();
        sc.nextLine();
        System.out.print("Enter Name: ");
        String name = sc.nextLine();
        System.out.print("Enter Specialization: ");
        String specialization = sc.nextLine();
        doctors.add(new Doctor(id, name, specialization));
        System.out.println("✅ Doctor added successfully!");
    }

    static void viewDoctors() {
        if (doctors.isEmpty()) {
            System.out.println("No doctors found!");
            return;
        }
        System.out.println("\n--- Doctor List ---");
        for (Doctor d : doctors) System.out.println(d);
    }

    // === APPOINTMENT MANAGEMENT ===
    static void bookAppointment() {
        System.out.print("Enter Patient ID: ");
        int pid = sc.nextInt();
        System.out.print("Enter Doctor ID: ");
        int did = sc.nextInt();
        sc.nextLine();
        System.out.print("Enter Date (dd-mm-yyyy): ");
        String date = sc.nextLine();
        appointments.add(new Appointment(pid, did, date));
        System.out.println("✅ Appointment booked successfully!");
    }

    static void viewAppointments() {
        if (appointments.isEmpty()) {
            System.out.println("No appointments found!");
            return;
        }
        System.out.println("\n--- Appointment List ---");
        for (Appointment a : appointments) System.out.println(a);
    }

    // === FILE HANDLING ===
    static void saveData() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("hospital.dat"))) {
            oos.writeObject(patients);
            oos.writeObject(doctors);
            oos.writeObject(appointments);
        } catch (Exception e) {
            System.out.println("Error saving data: " + e);
        }
    }

    static void loadData() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("hospital.dat"))) {
            patients = (ArrayList<Patient>) ois.readObject();
            doctors = (ArrayList<Doctor>) ois.readObject();
            appointments = (ArrayList<Appointment>) ois.readObject();
        } catch (Exception e) {
            System.out.println("No previous data found. Starting new system...");
        }
    }
}

output :
=== Hospital Management System ===
1. Add Patient
2. View Patients
3. Add Doctor
4. View Doctors
5. Book Appointment
6. View Appointments
7. Exit
Enter your choice: 1
Enter Patient ID: 101
Enter Name: Ravi Kumar
Enter Disease: Fever
Enter Age: 32
Enter Gender: Male
✅ Patient add=== Hospital Management System ===
1. Add Patient
2. View Patients
3. Add Doctor
4. View Doctors
5. Book Appointment
6. View Appointments
7. Exit
Enter your choice: 1
Enter Patient ID: 101
Enter Name: Ravi Kumar
Enter Disease: Fever
Enter Age: 32
Enter Gender: Male
✅ Patient added successfully!